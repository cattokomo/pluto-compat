local {
  json
} = require "*"

local file_ast = assert(arg[1], "provide path to AST file generated by c2ffi")
local lib = assert(arg[2], "provide path to pluto shared library (compiled without PLUTO_C_LINKAGE)")

local f = assert(io.open(file_ast))
local raw_ast = f:read("a")
f:close()

local cmd = assert(io.popen($"nm -D '{lib}'"))
local lib_definitions = cmd:read("a")
cmd:close()

local ast = json.decode(raw_ast)
  :filter(|v| -> v.tag == "function")
  :reorder()

local func_names = lib_definitions:split("\n")
  :map(|v| -> v:split(" ")[3])
  :filter(|v| -> v:match("^_Z%d+lua") ~= nil)
  :reorder()

local buffer = {
[[
#ifndef PLUTO_COMPAT_H
#define PLUTO_COMPAT_H
#define PLUTO_API
#include <stdio.h>
#include "luaconf.h"

typedef struct lua_State lua_State;

typedef LUA_NUMBER lua_Number;

typedef LUA_INTEGER lua_Integer;

typedef LUA_UNSIGNED lua_Unsigned;

typedef LUA_KCONTEXT lua_KContext;

typedef int (*lua_CFunction) (lua_State *L);

typedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);

typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);

typedef int (*lua_Writer) (lua_State *L, const void *p, size_t sz, void *ud);

typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);

typedef void (*lua_WarnFunction) (void *ud, const char *msg, int tocont);

typedef struct lua_Debug lua_Debug;

typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);

typedef struct luaL_Buffer luaL_Buffer;

typedef struct luaL_Reg {
  const char *name;
  lua_CFunction func;
} luaL_Reg;

typedef struct luaL_Stream {
  FILE *f;
  lua_CFunction closef;
} luaL_Stream;
]]
}

local function replace_type(type: table): string
  return (type.tag:gsub(".+", {
    [":pointer"] = type.tag == ":pointer" ? replace_type(type.type) .. "*" : nil,
    [":void"] = "void",
    [":int"] = "int",
    [":char"] = "char",
    [":unsigned-int"] = "unsigned int",
  }))
end

local function get_funcname(mangled_sym: string): string
  mangled_sym = mangled_sym:sub(3)
  local length = mangled_sym:match("^%d+")
  local rest = mangled_sym:match($"^{length}(.+)")
  return mangled_sym:sub(#length + 1, tonumber(length) + #length)
end

local func_defs = {}
for ast as node do
  func_defs[node.name] = {
    name = node.name,
    return_type = replace_type(node["return-type"]),
    parameters = {}
  }

  for node.parameters as node_param do
    func_defs[node.name].parameters:insert({
      name = node_param.name,
      type = replace_type(node_param.type),
    })
  end
end

for func_names as func_name do
  local infosym = func_defs[get_funcname(func_name)]
  if not infosym then
    continue
  end
  buffer:insert($"static {infosym.return_type} {func_name}({infosym.parameters:mapped(|v| -> v.type):concat(", ")});\n")
  
  buffer:insert('PLUTO_API ')
  buffer:insert(infosym.return_type .. " ")
  buffer:insert(infosym.name)
  buffer:insert("(")
  buffer:insert(infosym.parameters:mapped(|v| -> $"{v.type} {v.name}"):concat(", "))
  buffer:insert(") { ")
  buffer:insert(func_name .. "(" .. infosym.parameters:map(|v| -> v.name):concat(", ") .. ");")
  buffer:insert(" }\n")
end

buffer:insert("#endif")

print(buffer:concat())
